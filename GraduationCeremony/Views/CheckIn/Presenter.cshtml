@model IEnumerable<GraduationCeremony.Models.DB.CheckIn>

@{
    ViewData["Title"] = "Presenter";
}

<link rel="stylesheet" href="~/css/Presenter.css" asp-append-version="true">

<h1>Presenter</h1>

<div class="person-profile-container">
    @for (int i = 0; i < Model.Count(); i++)
    {
        <!-- Inside the loop -->
        <div class="person-profile" style="display: @(i == 0 ? "block" : "none")">
            <div class="card">
                <div class="card-body">
                    <ul class="list-group list-group-flush">
                        <li class="list-group-item text-black"><strong>Name:</strong> @Model.ElementAt(i).Forenames @Model.ElementAt(i).Surname</li>
                        <!-- Giving unique id to keep track -->
                        <input type="hidden" id="currentPersonForenames_@i" value="@Model.ElementAt(i).Forenames" />
                        <input type="hidden" id="currentPersonSurname_@i" value="@Model.ElementAt(i).Surname" />
                        <li class="list-group-item text-black" id="pronunciation_@i"><strong>Pronunciation:</strong></li>
                        <li class="list-group-item text-black"><strong>Qualification:</strong> @Model.ElementAt(i).AwardDescription</li>
                        @if (!string.IsNullOrEmpty(@Model.ElementAt(i).Major1))
                        {
                            <li class="list-group-item text-black"><strong>Major:</strong> @Model.ElementAt(i).Major1</li>
                        }
                        @if (!string.IsNullOrEmpty(@Model.ElementAt(i).Major2))
                        {
                            <li class="list-group-item text-black"><strong>Major 2:</strong> @Model.ElementAt(i).Major2</li>
                        }
                        <li class="list-group-item text-black"><strong>Level:</strong> @Model.ElementAt(i).Level</li>
                        <li class="list-group-item text-black"><strong>Person Code:</strong> @ViewBag.School</li>
                    </ul>
                </div>
            </div>
        </div>
    }
</div>

<div class="d-flex justify-content-between">
    <button id="prevButton" class="btn">Previous Person</button>
    <button id="nextButton" class="btn">Next Person</button>
</div>



@section scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script type="text/javascript">
        var currentPersonIndex = 0;
        var personProfiles = document.querySelectorAll(".person-profile");

        function updateDisplay() {
            for (var i = 0; i < personProfiles.length; i++) {
                if (i === currentPersonIndex) {
                    personProfiles[i].style.display = "block";
                } else {
                    personProfiles[i].style.display = "none";
                }
            }
        }
        /** NEED TO MODIFY
         *         function fetchDataAndUpdate() {
            // Use AJAX to fetch the updated data
            $.ajax({
                url: "/CheckIn/GetUpdatedPersons",
                type: "GET",
                success: function (data) {
                    // Ensure the current index is within bounds
                    currentPersonIndex = Math.min(currentPersonIndex, data.length - 1);

                    // Update the table with new data
                    if (data.length > personProfiles.length) {
                        // If new data is available, update the profiles and display the new person
                        personProfiles = document.querySelectorAll(".person-profile");
                        updateDisplay();

                        // Call GetPronunciation for the new person
                        GetPronunciation(
                            document.getElementById('currentPersonForenames_' + currentPersonIndex).value,
                            document.getElementById('currentPersonSurname_' + currentPersonIndex).value,
                            document.getElementById('pronunciation_' + currentPersonIndex)
                        );
                    }
                }
            });
        }
         */


        function fetchDataAndUpdate() {
            // Use AJAX to fetch the updated data
            $.ajax({
                url: "/CheckIn/GetUpdatedPersons",
                type: "GET",
                success: function (data) {
                    // Update the table with new data

                    // Ensure the current index is within bounds
                    currentPersonIndex = Math.min(currentPersonIndex, data.length - 1);

                    updateDisplay();
                }
            });
        }

        // Check for updates (every 5 seconds)
        setInterval(fetchDataAndUpdate, 5000);

        // Event listeners for Next and Previous Buttons
        document.getElementById("nextButton").addEventListener("click", function () {
            if (currentPersonIndex < personProfiles.length - 1) {
                currentPersonIndex++;
                // Call GetPronunciation when switching to the next person
                GetPronunciation(
                    document.getElementById('currentPersonForenames_' + currentPersonIndex).value,
                    document.getElementById('currentPersonSurname_' + currentPersonIndex).value,
                    document.getElementById('pronunciation_' + currentPersonIndex)
                );
                
            }
            fetchDataAndUpdate();
        });

        document.getElementById("prevButton").addEventListener("click", function () {
            if (currentPersonIndex > 0) {
                currentPersonIndex--;

                // Call GetPronunciation when switching to the previous person
                GetPronunciation(
                    document.getElementById('currentPersonForenames_' + currentPersonIndex).value,
                    document.getElementById('currentPersonSurname_' + currentPersonIndex).value,
                    document.getElementById('pronunciation_' + currentPersonIndex)
                );

                fetchDataAndUpdate();
            }
        });

        // Function to get the pronunciation of a word
        function GetPronunciation(forenames, surname, pronunciationElement) {
            var vowels = ['a', 'e', 'i', 'o', 'u'];
            var syllables = [];
            var currentSyllable = "";

            // Trim leading and trailing whitespaces
            var trimmedForenames = forenames.trim();
            var trimmedSurname = surname.trim();

            // Combine forenames and surname
            var fullName = trimmedForenames + " " + trimmedSurname;

            // Handle case where either forenames or surname is empty
            if (fullName.length === 0) {
                pronunciationElement.innerText = "Pronunciation: [Empty Name]";
                return;
            }

            for (var i = 0; i < fullName.length; i++) {
                var letter = fullName[i].toLowerCase();
                if (vowels.indexOf(letter) !== -1) {
                    if (currentSyllable) {
                        syllables.push(currentSyllable);
                        currentSyllable = "";
                    }
                }
                currentSyllable += fullName[i];
            }

            if (currentSyllable) {
                syllables.push(currentSyllable);
            }

            var pronunciation = syllables.join("-");
            // Update the content of the pronunciation element
            pronunciationElement.innerText = pronunciation;
        }

        // Initial data fetch and update
        fetchDataAndUpdate();
    </script>
}
</script>