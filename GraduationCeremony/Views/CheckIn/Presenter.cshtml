@model IEnumerable<GraduationCeremony.Models.DB.CheckIn>

@{
    ViewData["Title"] = "Presenter";
}

<h1>Presenter</h1>

<div class="person-profile-container">
    @for (int i = 0; i < Model.Count(); i++)
    {
        <div class="person-profile" style="display: @(i == 0 ? "block" : "none")">
            <div class="card">
                <div class="card-body">
                    <ul class="list-group list-group-flush">
                        <li class="list-group-item" id="name"><strong>Name:</strong> @Model.ElementAt(i).Forenames @Model.ElementAt(i).Surname</li>
                        <li class="list-group-item" id="pronunciation"><strong>Pronunciation:</strong></li>
                        <li class="list-group-item"><strong>Qualification:</strong> @Model.ElementAt(i).AwardDescription</li>
                        <li class="list-group-item"><strong>Level:</strong> @Model.ElementAt(i).Level</li>
                        <li class="list-group-item"><strong>Person Code:</strong> @Model.ElementAt(i).PersonCode</li>
                        <li class="list-group-item"><strong>Date of Birth:</strong> @Model.ElementAt(i).DateOfBirth</li>
                        <li class="list-group-item"><strong>College Email:</strong> @Model.ElementAt(i).CollegeEmail</li>
                        <li class="list-group-item"><strong>Mobile:</strong> @Model.ElementAt(i).Mobile</li>
                    </ul>
                </div>
            </div>
        </div>
    }
</div>

<div class="d-flex justify-content-between">
    <button id="prevButton" class="btn" style="background-color: #ff5733; color: #fff;">Previous Person</button>
    <button id="nextButton" class="btn" style="background-color: #3374ff; color: #fff;">Next Person</button>
</div>

@section scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script type="text/javascript">
        var currentPersonIndex = 0;
        var personProfiles = document.querySelectorAll(".person-profile");

        function updateDisplay() {
            for (var i = 0; i < personProfiles.length; i++) {
                if (i === currentPersonIndex) {
                    personProfiles[i].style.display = "block";
                } else {
                    personProfiles[i].style.display = "none";
                }
            }
        }

        function fetchDataAndUpdate() {
            // Use AJAX to fetch the updated data
            $.ajax({
                url: "/Graduation/GetUpdatedPersons",
                type: "GET",
                success: function (data) {
                    // Update the table with new data

                    // Ensure the current index is within bounds
                    currentPersonIndex = Math.min(currentPersonIndex, data.length - 1);

                    updateDisplay();
                }
            });
        }

        // Function to get the pronunciation of a word
        function GetPronunciation(word) {
            var vowels = ['a', 'e', 'i', 'o', 'u'];
            var syllables = [];
            var currentSyllable = "";

            for (var i = 0; i < word.length; i++) {
                var letter = word[i].toLowerCase();
                if (vowels.indexOf(letter) !== -1) {
                    if (currentSyllable) {
                        syllables.push(currentSyllable);
                        currentSyllable = "";
                    }
                }
                currentSyllable += word[i];
            }

            if (currentSyllable) {
                syllables.push(currentSyllable);
            }

            var pronunciation = syllables.join("-");
            // Update the content of the pronunciation element
            document.getElementById("pronunciation").innerText = "Pronunciation: " + pronunciation;
        }

        // Check for updates (every 5 seconds)
        setInterval(fetchDataAndUpdate, 5000);

        // Event listeners for Next and Previous Buttons
        document.getElementById("nextButton").addEventListener("click", function () {
            if (currentPersonIndex < personProfiles.length - 1) {
                currentPersonIndex++;
                // Call GetPronunciation when switching to the next person
                GetPronunciation(document.getElementById('name').innerText);
                updateDisplay();
            }
        });

        document.getElementById("prevButton").addEventListener("click", function () {
            if (currentPersonIndex > 0) {
                currentPersonIndex--;
                // Call GetPronunciation when switching to the previous person
                GetPronunciation(document.getElementById('name').innerText);
                updateDisplay();
            }
        });

        // Initial data fetch and update
        fetchDataAndUpdate();
    </script>
}
</script>
