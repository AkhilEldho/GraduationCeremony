@model IEnumerable<GraduationCeremony.Models.DB.CheckIn>

@{
    ViewData["Title"] = "Presenter";
}

<style>
    body {
        background-color: #f8f9fa;
    }

    /* Presenter styling */
    .presenter-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 80vh;
    }

    .card {
        background-color: #fff;
        color: #333;
        border: 1px solid #d9534f;
        border-radius: 10px;
        box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.2);
        padding: 20px;
    }

        .card h1 {
            text-align: center;
        }

    .display-4 {
        font-size: 3rem;
        color: #d9534f;
    }

    .person-profile-container {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .person-profile {
        margin-bottom: 20px;
        width: 100%;
        max-width: 600px;
        background-color: #f8f9fa;
        padding: 15px;
        border-radius: 8px;
        box-shadow: 0px 3px 8px rgba(0, 0, 0, 0.1);
    }

    .list-group-item {
        margin-bottom: 10px;
    }

    .d-flex {
        flex-wrap: wrap;
        justify-content: space-around;
        margin-bottom: 20px;
    }

    .list-item {
        font-size: 20px;
    }

    /* Fancier Button Styles */
    .btn {
        font-weight: 600;
        margin-top: 10px;
        margin-bottom: 20px;
        transition: background-color 0.3s ease-in-out, color 0.3s ease-in-out, border-color 0.3s ease-in-out;
    }

    #prevButton {
        background-color: #d9534f;
        color: #fff;
        border: 1px solid #d9534f;
    }

        #prevButton:hover {
            background-color: #713232;
            border: 1px solid #713232;
        }

    #nextButton {
        background-color: #3374ff;
        color: #fff;
        border: 1px solid #3374ff;
    }

        #nextButton:hover {
            background-color: #1a52cc;
            border: 1px solid #1a52cc;
        }
</style>


<div class="card" style="margin: 0 auto;">
    <div class="title">Presenter</div>
    <div class="person-profile-container mt-5">
        @for (int i = 0; i < Model.Count(); i++)
        {
            <div class="person-profile" style="display: @(i == 0 ? "block" : "none")">
                <ul class="list-group list-group-flush">
                    <li class="list-group-item text-black list-item"><strong>Name:</strong> @Model.ElementAt(i).Forenames @Model.ElementAt(i).Surname.ToUpper()</li>
                    <input type="hidden" id="currentPersonForenames_@i" value="@Model.ElementAt(i).Forenames" />
                    <input type="hidden" id="currentPersonSurname_@i" value="@Model.ElementAt(i).Surname" />
                    <input type="hidden" id="personCode_@i" value="@Model.ElementAt(i).PersonCode" />

                    @if (string.IsNullOrEmpty(Model.ElementAt(i).Pronunciation))
                    {
                        <li class="list-group-item text-black list-item" id="pronunciation_@i"></li>
                    }
                    else
                    {
                        <li class="list-group-item text-black list-item">@Model.ElementAt(i).Pronunciation</li>
                    }

                    <li class="list-group-item text-black list-item"><strong>Qualification:</strong> @Model.ElementAt(i).AwardDescription</li>
                    <li class="list-group-item text-black list-item"><strong>Level:</strong> @Model.ElementAt(i).Level</li>
                    <li class="list-group-item text-black list-item"><strong>School:</strong> @Model.ElementAt(i).School</li>
                </ul>
            </div>
        }
    </div>

    <div class="d-flex">
        <button id="prevButton" class="btn">Previous Person</button>
        <button id="nextButton" class="btn">Next Person</button>
    </div>
</div>


@section scripts {
    <!-- Include jQuery library -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script type="text/javascript">
        // Initialize variables
        var currentPersonIndex = 0;
        var personProfiles = document.querySelectorAll(".person-profile");

        // Execute when the window is loaded
        window.onload = function () {
            // Initial setup
            GetPronunciation(
                document.getElementById('currentPersonForenames_' + currentPersonIndex).value,
                document.getElementById('currentPersonSurname_' + currentPersonIndex).value,
                document.getElementById('pronunciation_' + currentPersonIndex)
            );
            sendPersonCodeToController(currentPersonIndex);
            updateDisplay();
        };

        // Function to send the personCode to the controller
        function sendPersonCodeToController(index) {
            var personCode = document.getElementById('personCode_' + index).value;

            $.ajax({
                url: "/CheckIn/UpdatePerson",
                type: "POST",
                data: { PersonCode: personCode },
                success: function (data) {
                    // Update currentPersonIndex and refresh display
                    currentPersonIndex = Math.min(currentPersonIndex, data.length - 1);
                    updateDisplay();
                }
            });
        }

        // Function to update the display based on currentPersonIndex
        function updateDisplay() {
            for (var i = 0; i < personProfiles.length; i++) {
                if (i === currentPersonIndex) {
                    personProfiles[i].style.display = "block";
                } else {
                    personProfiles[i].style.display = "none";
                }
            }
        }

        // Function to fetch and update data from the server
        function fetchDataAndUpdate() {
            $.ajax({
                url: "/CheckIn/GetUpdatedPersons",
                type: "GET",
                success: function (data) {
                    console.log("Data received from server:", data);

                    // Ensure currentPersonIndex is within bounds
                    currentPersonIndex = Math.min(currentPersonIndex, data.length - 1);

                    // Update each profile with new data
                    for (var i = 0; i < personProfiles.length; i++) {
                        var profile = personProfiles[i];
                        var personData = data[i];
                        updateProfileContent(profile, personData);
                    }

                    // Update the personProfiles array
                    personProfiles = document.querySelectorAll(".person-profile");

                    // Update the display
                    updateDisplay();
                },
            });
        }

        // Function to update the content of each profile
        function updateProfileContent(profile, personData) {
            // Log information about the update
            console.log("Updating profile content for person:", personData, profile);

            // Get elements inside each profile that need to be updated
            var nameElement = profile.querySelector('.list-item-name');
            var pronunciationElement = profile.querySelector('.list-item-pronunciation');
            var awardDescriptionElement = profile.querySelector('.list-item-award');
            var levelElement = profile.querySelector('.list-item-level');
            var schoolElement = profile.querySelector('.list-item-school');

            // Check if the elements are not null before updating
            if (nameElement) {
                var fullName = (personData.Forenames || '') + ' ' + (personData.Surname || '');
                nameElement.innerText = "Name: " + fullName;
            }

            if (pronunciationElement) {
                pronunciationElement.innerText = personData.Pronunciation || "Pronunciation: [Empty Pronunciation]";
            }

            if (awardDescriptionElement) {
                awardDescriptionElement.innerText = "Qualification: " + (personData.AwardDescription || '');
            }

            if (levelElement) {
                levelElement.innerText = "Level: " + (personData.Level || '');
            }

            if (schoolElement) {
                schoolElement.innerText = "School: " + (personData.School || '');
            }
        }

        // Event listener for the "Next Person" button
        document.getElementById("nextButton").addEventListener("click", function () {
            if (currentPersonIndex < personProfiles.length - 1) {
                currentPersonIndex++;
                GetPronunciation(
                    document.getElementById('currentPersonForenames_' + currentPersonIndex).value,
                    document.getElementById('currentPersonSurname_' + currentPersonIndex).value,
                    document.getElementById('pronunciation_' + currentPersonIndex)
                );
            }
            sendPersonCodeToController(currentPersonIndex);
            fetchDataAndUpdate();
        });

        // Event listener for the "Previous Person" button
        document.getElementById("prevButton").addEventListener("click", function () {
            if (currentPersonIndex > 0) {
                currentPersonIndex--;
                GetPronunciation(
                    document.getElementById('currentPersonForenames_' + currentPersonIndex).value,
                    document.getElementById('currentPersonSurname_' + currentPersonIndex).value,
                    document.getElementById('pronunciation_' + currentPersonIndex)
                );
            }
            fetchDataAndUpdate();
        });

        // Function to get the pronunciation of a name
        function GetPronunciation(forenames, surname, pronunciationElement) {
            var vowels = ['a', 'e', 'i', 'o', 'u'];
            var syllables = [];
            var currentSyllable = "";

            var trimmedForenames = forenames.trim();
            var trimmedSurname = surname.trim();

            var fullName = trimmedForenames + " " + trimmedSurname;

            // Handle case where the name is empty
            if (fullName.length === 0) {
                pronunciationElement.innerText = "Pronunciation: [Empty Name]";
                return;
            }

            // Split the name into syllables based on vowels
            for (var i = 0; i < fullName.length; i++) {
                var letter = fullName[i].toLowerCase();
                if (vowels.indexOf(letter) !== -1) {
                    if (currentSyllable) {
                        syllables.push(currentSyllable);
                        currentSyllable = "";
                    }
                }
                currentSyllable += fullName[i];
            }

            if (currentSyllable) {
                syllables.push(currentSyllable);
            }

            // Join syllables with a hyphen and update the pronunciation element
            var pronunciation = syllables.join("-");
            pronunciationElement.innerText = pronunciation;
        }

        // Fetch and update data at regular intervals
        // setInterval(fetchDataAndUpdate, 5000);

        // Initial data fetch and update
        fetchDataAndUpdate();
    </script>
}

