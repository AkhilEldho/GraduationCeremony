@model IEnumerable<GraduationCeremony.Models.DB.CheckIn>

@{
    ViewData["Title"] = "Presenter";
}

<style>
    body {
        background-color: #f8f9fa;
    }

    /* Presenter styling */
    .presenter-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 80vh;
    }

    .card {
        background-color: #fff;
        color: #333;
        border: 1px solid #d9534f;
        border-radius: 10px;
        box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.2);
        width: 100%;
        max-width: 1000px;
        padding: 20px;
    }

        .card h1 {
            text-align: center;
        }

    .display-4 {
        font-size: 3rem;
        color: #d9534f;
    }

    .person-profile-container {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .person-profile {
        margin-bottom: 20px;
        width: 100%;
        max-width: 600px;
        background-color: #f8f9fa;
        padding: 15px;
        border-radius: 8px;
        box-shadow: 0px 3px 8px rgba(0, 0, 0, 0.1);
    }

    .list-group-item {
        margin-bottom: 10px;
    }

    .d-flex {
        flex-wrap: wrap;
        justify-content: space-around;
        margin-bottom: 20px;
    }

    .list-item {
        font-size: 20px;
    }

    /* Fancier Button Styles */
    .btn {
        font-weight: 600;
        margin-top: 10px;
        margin-bottom: 20px;
        transition: background-color 0.3s ease-in-out, color 0.3s ease-in-out, border-color 0.3s ease-in-out;
    }

    #prevButton {
        background-color: #d9534f;
        color: #fff;
        border: 1px solid #d9534f;
    }

        #prevButton:hover {
            background-color: #713232;
            border: 1px solid #713232;
        }

    #nextButton {
        background-color: #3374ff;
        color: #fff;
        border: 1px solid #3374ff;
    }

        #nextButton:hover {
            background-color: #1a52cc;
            border: 1px solid #1a52cc;
        }
</style>

<div class="presenter-container">
    <div class="card">
        <h1 class="display-4">Presenter</h1>

        <div class="person-profile-container">
            @for (int i = 0; i < Model.Count(); i++)
            {
                <div class="person-profile" style="display: @(i == 0 ? "block" : "none")">
                    <ul class="list-group list-group-flush">
                        <li class="list-group-item text-black list-item"><strong>Name:</strong> @Model.ElementAt(i).Forenames @Model.ElementAt(i).Surname.ToUpper()</li>
                        <input type="hidden" id="currentPersonForenames_@i" value="@Model.ElementAt(i).Forenames" />
                        <input type="hidden" id="currentPersonSurname_@i" value="@Model.ElementAt(i).Surname" />

                        @if (string.IsNullOrEmpty(Model.ElementAt(i).Pronunciation))
                        {
                            <li class="list-group-item text-black list-item" id="pronunciation_@i"><strong>Pronunciation:</strong></li>
                        }
                        else
                        {
                            <li class="list-group-item text-black list-item"><strong>Pronunciation:</strong> @Model.ElementAt(i).Pronunciation</li>
                        }

                        <li class="list-group-item text-black list-item"><strong>Qualification:</strong> @Model.ElementAt(i).AwardDescription</li>
                        <li class="list-group-item text-black list-item"><strong>Level:</strong> @Model.ElementAt(i).Level</li>
                        <li class="list-group-item text-black list-item"><strong>School:</strong> @Model.ElementAt(i).School</li>
                    </ul>
                </div>
            }
        </div>

        <div class="d-flex justify-content-between">
            <button id="prevButton" class="btn">Previous Person</button>
            <button id="nextButton" class="btn">Next Person</button>
        </div>
    </div>
</div>

@section scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script type="text/javascript">
        var currentPersonIndex = 0;
        var personProfiles = document.querySelectorAll(".person-profile");

        window.onload = function () {
            GetPronunciation(
                document.getElementById('currentPersonForenames_' + currentPersonIndex).value,
                document.getElementById('currentPersonSurname_' + currentPersonIndex).value,
                document.getElementById('pronunciation_' + currentPersonIndex)
            );
            updateDisplay();
        };

        function updateDisplay() {
            for (var i = 0; i < personProfiles.length; i++) {
                if (i === currentPersonIndex) {
                    personProfiles[i].style.display = "block";
                } else {
                    personProfiles[i].style.display = "none";
                }
            }
        }

        function fetchDataAndUpdate() {
            $.ajax({
                url: "/CheckIn/GetUpdatedPersons",
                type: "GET",
                success: function (data) {
                    currentPersonIndex = Math.min(currentPersonIndex, data.length - 1);
                    updateDisplay();
                }
            });
        }

        setInterval(fetchDataAndUpdate, 5000);

        document.getElementById("nextButton").addEventListener("click", function () {
            if (currentPersonIndex < personProfiles.length - 1) {
                currentPersonIndex++;
                GetPronunciation(
                    document.getElementById('currentPersonForenames_' + currentPersonIndex).value,
                    document.getElementById('currentPersonSurname_' + currentPersonIndex).value,
                    document.getElementById('pronunciation_' + currentPersonIndex)
                );
            }
            fetchDataAndUpdate();
        });

        document.getElementById("prevButton").addEventListener("click", function () {
            if (currentPersonIndex > 0) {
                currentPersonIndex--;
                GetPronunciation(
                    document.getElementById('currentPersonForenames_' + currentPersonIndex).value,
                    document.getElementById('currentPersonSurname_' + currentPersonIndex).value,
                    document.getElementById('pronunciation_' + currentPersonIndex)
                );
                fetchDataAndUpdate();
            }
        });

        function GetPronunciation(forenames, surname, pronunciationElement) {
            var vowels = ['a', 'e', 'i', 'o', 'u'];
            var syllables = [];
            var currentSyllable = "";

            var trimmedForenames = forenames.trim();
            var trimmedSurname = surname.trim();

            var fullName = trimmedForenames + " " + trimmedSurname;

            if (fullName.length === 0) {
                pronunciationElement.innerText = "Pronunciation: [Empty Name]";
                return;
            }

            for (var i = 0; i < fullName.length; i++) {
                var letter = fullName[i].toLowerCase();
                if (vowels.indexOf(letter) !== -1) {
                    if (currentSyllable) {
                        syllables.push(currentSyllable);
                        currentSyllable = "";
                    }
                }
                currentSyllable += fullName[i];
            }

            if (currentSyllable) {
                syllables.push(currentSyllable);
            }

            var pronunciation = syllables.join("-");
            pronunciationElement.innerText = pronunciation;
        }

        fetchDataAndUpdate();
    </script>
}
