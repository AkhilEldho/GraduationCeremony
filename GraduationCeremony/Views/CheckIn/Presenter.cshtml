@model IEnumerable<GraduationCeremony.Models.DB.CheckIn>

@{
    ViewData["Title"] = "Presenter";
}

<style>

    .card {
        background-color: #fff;
        padding: 20px;
    }

        .card h1 {
            text-align: center;
        }

    .display-4 {
        font-size: 3rem;
        color: #d9534f;
    }

    .person-profile-container {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .person-profile {
        margin-bottom: 20px;
        width: 100%;
        max-width: 600px;
        background-color: #f8f9fa;
        padding: 15px;
    }

    .list-group-item {
        margin-bottom: 10px;
    }

    .d-flex {
        flex-wrap: wrap;
        justify-content: space-around;
        margin-bottom: 20px;
    }

    .list-item {
        font-size: 20px;
    }

    .btn {
        font-weight: 600;
        transition: background-color 0.3s ease-in-out, color 0.3s ease-in-out, border-color 0.3s ease-in-out;
    }

        #prevButton:hover {
        background-color: #DC3545;
        border: 1px solid #DC3545;
        }

        #nextButton:hover {
            background-color: #1a52cc;
            border: 1px solid #1a52cc;
        }
</style>


<div class="card" style="margin: 0 auto;">
    <div class="title">Presenter</div>
    <div class="person-profile-container mt-5">
        @for (int i = 0; i < Model.Count(); i++)
        {
            <div class="person-profile" style="display: @(i == 0 ? "block" : "none")">
                <ul class="list-group list-group-flush">
                    <li class="list-group-item text-black list-item"><strong>Name:</strong> @Model.ElementAt(i).Forenames @Model.ElementAt(i).Surname.ToUpper()</li>

                    <input type="hidden" id="currentPersonForenames_@i" value="@Model.ElementAt(i).Forenames" />
                    <input type="hidden" id="currentPersonSurname_@i" value="@Model.ElementAt(i).Surname" />
                    <input type="hidden" id="personCode_@i" value="@Model.ElementAt(i).PersonCode" />

                    @if (string.IsNullOrEmpty(Model.ElementAt(i).Pronunciation))
                    {
                        <li class="list-group-item text-black list-item" id="pronunciation_@i"></li>
                    }
                    else
                    {
                        <li class="list-group-item text-black list-item">@Model.ElementAt(i).Pronunciation</li>
                    }

                    <li class="list-group-item text-black list-item"><strong>Qualification:</strong> @Model.ElementAt(i).AwardDescription</li>
                    <li class="list-group-item text-black list-item"><strong>Level:</strong> @Model.ElementAt(i).Level</li>
                    <li class="list-group-item text-black list-item"><strong>School:</strong> @Model.ElementAt(i).School</li>
                </ul>
            </div>
        }
    </div>

    <div class="d-flex">
        <button id="prevButton" class="btn btn-primary">Previous Person</button>
        <button id="nextButton" class="btn btn-success btn-lg">Next Person</button>
    </div>
</div>


@section scripts {
    <!-- Include jQuery library -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script type="text/javascript">

        // Move the currentIndex and Model declarations outside the click event handlers
        var currentIndex = 0;

        window.onload = function () {
                updateDisplay();
                sendPersonCodeToController(currentIndex);
        };

        // Function to handle the "Next Person" button click
        $('#nextButton').click(function () {
            // Increment the current index if it's not already at the end
            if (currentIndex < @Model.Count()) {
                currentIndex++;
                sendPersonCodeToController(currentIndex);
                // Update the display
                fetchDataAndUpdate();
                location.reload();
            }
        });

        // Function to handle the "Previous Person" button click
        $('#prevButton').click(function () {
            // Decrement the current index if it's not already at the beginning
            if (currentIndex > 0) {
                currentIndex--;
                // Update the display
                fetchDataAndUpdate();
            }
        });

        // Function to fetch and update data from the server
        function fetchDataAndUpdate() {
            $.ajax({
                url: "/CheckIn/GetUpdatedPersons",
                type: "GET",
                success: function (data) {
                    try {
                        console.log("Data received from server:", data);

                        // Update the display
                        updateDisplay();
                    } catch (error) {
                        console.error("Error parsing JSON data:", error);
                    }
                },
                error: function (xhr, status, error) {
                    console.error("Error fetching data:", status, error);
                }
            });
        }

        // Function to send the personCode to the controller
        function sendPersonCodeToController(index) {
            var personCode = document.getElementById('personCode_' + index).value;

            $.ajax({
                url: "/CheckIn/UpdatePerson",
                type: "POST",
                data: { PersonCode: personCode },
                success: function (data) {
                    // Update currentPersonIndex and refresh display
                    currentPersonIndex = Math.min(currentPersonIndex, data.length - 1);
                    updateDisplay();
                }
            });
        }


        // Function to update the display based on the received data
        function updateDisplay() {
            // Hide all person profiles
            $('.person-profile').hide();

            // Show the person profile at the current index
            var currentProfile = $('.person-profile').eq(currentIndex);
            currentProfile.show();

            // Get the relevant elements for pronunciation
            var forenames = $('#currentPersonForenames_' + currentIndex).val();
            var surname = $('#currentPersonSurname_' + currentIndex).val();
            var pronunciationElement = $('#pronunciation_' + currentIndex);

            // Call GetPronunciation to update the pronunciation element
            GetPronunciation(forenames, surname, pronunciationElement);

            // Enable or disable the next and previous buttons based on the current index
            $('#prevButton').prop('disabled', currentIndex === 0);
            $('#nextButton').prop('disabled', currentIndex === @Model.Count() - 1);

        }


        // Function to get the pronunciation of a name
        function GetPronunciation(forenames, surname, pronunciationElement) {
            var vowels = ['a', 'e', 'i', 'o', 'u'];
            var syllables = [];
            var currentSyllable = "";

            var trimmedForenames = forenames.trim();
            var trimmedSurname = surname.trim();

            var fullName = trimmedForenames + " " + trimmedSurname;

            // Handle case where the name is empty
            if (fullName.length === 0) {
                pronunciationElement.text("Pronunciation: [Empty Name]");
                return;
            }

            // Split the name into syllables based on vowels
            for (var i = 0; i < fullName.length; i++) {
                var letter = fullName[i].toLowerCase();
                if (vowels.indexOf(letter) !== -1) {
                    if (currentSyllable) {
                        syllables.push(currentSyllable);
                        currentSyllable = "";
                    }
                }
                currentSyllable += fullName[i];
            }

            if (currentSyllable) {
                syllables.push(currentSyllable);
            }

            // Join syllables with a hyphen and update the pronunciation element
            var pronunciation = syllables.join("-");
            pronunciationElement.text(pronunciation);
        }

        // Initial data fetch and update
        fetchDataAndUpdate();
    </script>
}

