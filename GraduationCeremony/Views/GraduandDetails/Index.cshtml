@model IPagedList<GraduationCeremony.Models.DB.GraduandDetails>

@using X.PagedList.Mvc.Core;
@using X.PagedList;
@using X.PagedList.Web.Common;

@{
    ViewData["Title"] = "Home Page";
}


<div class="container">
    <h1 class="display-4">Search Graduand</h1>
</div>

<form id="searchForm" action="/GraduandDetails/Search" method="get" autocomplete="off" class="search-form">
    <div class="form-group">
        <input type="text" id="searchString" name="searchString" class="search-input"
               autocomplete="off" onkeyup="XAjaxRequest(this.value);" placeholder="Enter name: " required />
    </div>
    <div class="form-group">
        <button type="submit" class="search-button">Search</button>
    </div>
    <div id="autoSuggestContainer" class="autoSuggest" style="border: none;"></div>
</form>

<div class="container">
    @if (!string.IsNullOrEmpty(ViewBag.Message))
    {
        <div class="alert alert-danger error-message">@ViewBag.Message</div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-striped table-bordered">
                <thead class="thead-white">
                    <tr>
                        <th>Forename</th>
                        <th>Surname</th>
                        <th>Person Code</th>
                        <th>Date of Birth</th>
                        <th>Award Code</th>
                        <th>Award Description</th>
                        <th>Qualification Code</th>
                        <th>Level</th>
                        <th>Email</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>@item.graduands.Forenames</td>
                            <td>@item.graduands.Surname</td>
                            <td>@item.graduandAwards.PersonCode</td>
                            <td>@item.graduands.DateOfBirth.ToShortDateString()</td>
                            <td>@item.awards.AwardCode</td>
                            <td>@item.awards.AwardDescription</td>
                            <td>@item.awards.QualificationCode</td>
                            <td>@item.awards.Level</td>
                            <td>@item.graduands.CollegeEmail</td>
                            <td>
                                <a asp-controller="GraduandDetails" asp-action="Edit" asp-route-personCode="@item.graduands.PersonCode" class="btn btn-primary">Edit</a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        @Html.PagedListPager(Model, page => Url.Action("Index",
        new { Page = page }),
        new PagedListRenderOptions
        {
        LiElementClasses = new string[] { "page-item" },
        PageClasses = new string[] { "page-link" }
        })

        <a asp-action="Index" class="btn btn-warning">Back to list</a>
    }

  
</div>


@*auto suggestion*@
<script type="text/javascript">
    function XAjaxRequest(searchString) {
        if (searchString.length < 1) {
            autoSuggestContainer.innerHTML = "";
            autoSuggestContainer.classList.remove("show-border");
            return;
        } else {
            autoSuggestContainer.classList.add("show-border");
        }


        //alert("testing searchString=" + searchString);
        var xmlhttp;
        xmlhttp = new XMLHttpRequest();
        var url = "/GraduandDetails/SearchGraduandDetailsByName?searchString=" + searchString;
        // open connection, GET is quick and simple, false: sync page will freeze
        xmlhttp.open("GET", url, false);
        // send the request to IndexAJAX
        xmlhttp.send();
        document.getElementById("autoSuggestContainer").style.display = "block";
        //need to clear out the container for a fresh auto-suggest list
        //else the auto-suggest list can keep growing and growing with additional user keyups
        document.getElementById("autoSuggestContainer").innerHTML = "";

        var messageObject = JSON.parse(xmlhttp.responseText); // receive the respose text

        var autoSuggestions = "";

        for (var i = 0; i < messageObject.length; i++) {
            //HTML code generation demo
            //Works together with the ".innerHTML" statement after the end of this "for" block
            autoSuggestions +=
                "<input type=\"button\" value=\"" + messageObject[i].graduands.Forenames + " " + messageObject[i].graduands.Surname + "\" "
                + "onclick=\"document.getElementById('searchString').value = this.value; document.getElementById('searchForm').submit();\" "
                + "style=\"background-color:transparent;\" />";

            autoSuggestions += "<br />";
        }
        //place the generated buttons HTML code inside the display div
        document.getElementById("autoSuggestContainer").innerHTML = autoSuggestions;
    }
</script>